HashMap

A HashMap in Java is a collection that implements the Map interface and is based on a hash table data structure. It is used to store key-value pairs, where each key is unique, and allows for efficient insertion, removal, and retrieval of values based on their associated keys.

Here is an example of creating and using a HashMap:

import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<>();
        map.put("Apple", 1);
        map.put("Banana", 2);
        map.put("Cherry", 3);
        System.out.println(map); // Prints {Apple=1, Banana=2, Cherry=3}

        System.out.println(map.get("Apple")); // Prints 1
        System.out.println(map.containsKey("Banana")); // Prints true
        System.out.println(map.size()); // Prints 3

        map.remove("Banana");
        System.out.println(map); // Prints {Apple=1, Cherry=3}
    }
}

In this example, we are creating a HashMap that maps strings (the keys) to integers (the values) and adding key-value pairs to it using the put() method. We are also retrieving the value associated with a key

show methods

Here are some of the commonly used methods in HashMap:

    put(K key, V value): Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced by the specified value.

    get(Object key): Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.

    containsKey(Object key): Returns true if this map contains a mapping for the specified key.

    remove(Object key): Removes the mapping for the specified key from this map if present.

    size(): Returns the number of key-value mappings in this map.

    isEmpty(): Returns true if this map contains no key-value mappings.

    clear(): Removes all of the mappings from this map.

    keySet(): Returns a Set view of the keys contained in this map.

    values(): Returns a Collection view of the values contained in this map.

    entrySet(): Returns a Set view of the mappings contained in this map.

    putAll(Map<? extends K,? extends V> m): Copies all of the mappings from the specified map to this map.

    getOrDefault(Object key, V defaultValue): Returns the value to which the specified key is mapped, or the defaultValue if this map contains no mapping for the key.

    replace(K key, V value): Replaces the entry for the specified key only if it is currently mapped to some value.

    replace(K key, V oldValue, V newValue): Replaces the entry for the specified key only if currently mapped to the specified value.

    computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction): If the specified key is not already associated with a value (or is mapped to null) associates it with

Sakalans Now
incompelete

I apologize, it looks like I cut off the end of my previous response. To complete my explanation, the computeIfAbsent() method computes a value using the given function, if the key is not already associated with a value, or returns the current value if it is.

And computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.

and compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).

and merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction) If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.
