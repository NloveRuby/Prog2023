Form handling can be done using either PHP or JavaScript, but the most common way is using PHP.

In PHP, form data can be accessed using the $_POST or $_GET superglobal arrays, depending on the method used to submit the form (POST or GET). The data can then be processed by the PHP script and used for various purposes, such as storing it in a database or sending it in an email.

Here's a simple example of form handling in PHP:

php

<form action="form_handler.php" method="post">
  Name: <input type="text" name="name"><br>
  Age: <input type="text" name="age"><br>
  <input type="submit" value="Submit">
</form>

// form_handler.php
<?php
  if (isset($_POST['name']) && isset($_POST['age'])) {
    $name = $_POST['name'];
    $age = $_POST['age'];
    echo 'Hello, ' . $name . '. You are ' . $age . ' years old.';
  }
?>

In JavaScript, form data can be accessed using the DOM (Document Object Model) and processed using JavaScript functions. JavaScript can be used for form validation and processing, but for more complex tasks, such as storing data in a database, you may need to use a server-side language such as PHP.

Here's a simple example of form handling in JavaScript:

php

<form id="myForm">
  Name: <input type="text" id="name"><br>
  Age: <input type="text" id="age"><br>
  <input type="button" value="Submit" onclick="submitForm()">
</form>

<script>
  function submitForm() {
    var name = document.getElementById("name").value;
    var age = document.getElementById("age").value;
    alert("Hello, " + name + ". You are " + age + " years old.");
  }
</script>

In this example, the form data is accessed using the document.getElementById() method, and the submitForm() function is called when the form is submitted. The function retrieves the values of the form inputs and displays an alert with the data.
